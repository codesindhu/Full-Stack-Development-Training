Framework is a collection of libraries

            React JS
          ------------ 
-->React is a library
-->it is used to develop single page application
-->it is a component based application(components are reusable)
-->react is declarative
-->it is introduced in the year 2013 by meta(facebook) jordan walke(developer)
-->before react backbone.js and ember.js are Frameworks used these are first Frameworks of javascript
**-->react will render component on the webpage without the page reload**(like ajax)
-->react uses MVC(model view contoller) architecture 
-->React Dependency : react, react-dom,react-scripts are the three dependencies which are installed when we create a react application
        i)react:
                -it uses createElement()
                -all-hooks comes under react
        ii)react-dom : used to create virtual-dom
        iii)react-scripts : it is used to run,debug,test.,eject the react application
**-->react uses diffing algorithim(one to one mapping is done by this)**

How to create React 
---------------------

two-ways : 1)CDN way(needs internet) 2)Node Way 
we use node Way
2a)NPM(node package manager)  : 
                            -->it is used to install,update,delete packages in js.
                            -->packages will be installed globally
commands :            
            npm install -g create-react-app
            create-react-app appname

            //to install latest version of react
            npm create vite@latest

2b)NPX(node package executer) :
                                -->used to execute packages without installing
                                -->no need to install packages globally
command  :  npx create-react-app appname


		React folder structure
		--------------------
node modules:
--> will store all packages and third party library.
    babel

src folder:-
-->It is a main folder used for creating componenets.

index.html file:-
-->It is a root file.

eslint (ecma script lint):-
-->used for debug purpose.

package.json file:-
-->used to store all dependency and
third-party-library.



COMPONENTS IN REACT
**************************

-->componenets are basic building blocks in react.
-->componenets are reusable.
-->Components are two types:-
                        a)class based componenets
                        b)function based componenets/presentational/dumb componenets

1)class based Component
-->It is es6 class in json
-->It uses render() method
    render() used to render elements/componenet on the web-page
-->It uses react-life-cycle.
-->It is statefull Component.
-->In this we consists of constructors.
-->Constructor is used to store data.
-->It uses extend keyword.
//in the class based componenet we are not allowed to use any variables (let,var,const)

import React from 'react'
class demo extends React.Component {
    render(){
        return <h1>i an class based Component</h1>
    }
}
export default demo;


2)function based componenet
-->It is pure function.
-->it doesn't have any react-life-cycle.
-->it doesn't uses render() method.
-->It is a stateless component
    after react 16.8 FBC becomes statefull componenet because of hooks.

import React from 'react'

function demo1()
{
    return <h1>iam function based component</h1>
}
export default demo1;

import React from 'react'
let demo2 = () => {
    return <h1>iam function based component</h1>
}
export default demo2;



  ways of creating html
--------------------------

1)html :  <h1>hello-world</h1>

2)js(dom) : 
let h1 = document.createElement("h1")
console.log(h1)
h1.textContent = "hello-world"

3)react : 
 (i)using React.createElement("tag-name","null or {id:"demo"}","Content")

 eg: - 
        React.createElement("h1","null","hello")
        React.createElement("ol","{id:"demo"}","React.createElement("ol","null","item1")")
 (ii) JSX (javascript xml)
 -->it is used to create html in react.
 -->it neither string nor html

 rules of JSX
 ************
 1)all the should be en-closed
  eg:- </h1>

 2)if there are more than one element it should wrapped inside parent element or fragment
 eg:-
 <div>(it consumes memory of div)
    <h1>hello</h1>
    <h2>hello-world</h2>
 </div>

 <> ---> fragment used to save memory in virtual-dom(it will not create any memory for fragment)
    <h1>hello</h1>
    <h2>hello-world</h2>
 </> 

 3)use {} brackers for writing expressions.
  eg:- <h1>{5+5}</h1>


  Props in REACT
-----------------
-->props stands for properties 
-->props are used to send data from one component to another component
-->props are uni-direction
-->props are object
-->props are immutable(read-only)


                        ****Interview Question****
Assignment 4 :  1)What is props drilling and how to avoid it?
                2)What is default props?   //with practical examples



   State in REACT
--------------------
-->state is used to store the data in the same component and update the data in the same component
-->states are mutable(can be read and write)
-->Syntax :- 
             let [inital-value, function]=useState(inital-value)

Forms in React
---------------
1)controlled form 
-->uses useState and onChange event to fetch data from form 
2)Uncontrolled Form
-->uses useRef hook to fetch data from the form 

   Ways of Using Styles in REACT
-----------------------------------
1)in-line way
2)globally clas
3)External Way(important&preferred)

useRef hook in react
--------------------
-->ref stands for reference
-->useRef hook uses Real-DOM 
-->useRef used in Uncontrolled form
-->useRef is having a property called current
-->useRef is having a keyword called 'ref' keyword
note: useRef will returns an object that object consists of current property

Syntax :- 
import useRef form 'react'
let/var/const identifier = useRef(inital-value)

  List and keys in REACT
--------------------------
-->list is used to interate an array of object using map() method
-->keys are used to keep track of an element,by using keys we can understand which element is created,updated,deleted.



-->props drilling :sending data from the parent componenet to nested child component
-->why to avoid : Code Maintainability, Component Coupling, Scalability Issues, Increased Boilerplate:
-->how to avoid props drilling : 
1)useContext hook
2)HOC(higher order componenet)
3)Redux

****useContext hook in REACT**** Interview
-----------------------------
-->useContext : it is used to pass or share data from one componenet to multiple componenet without passing an props.
-->it is used to avoid props drilling

Syntax:-
 
 step1 : create a context and export it
 import React from 'react'
 export var/const/let identifier-name = React.createContext()

 step 2 : use provider to pass an value.
<identifier-name.provider value={}>
    <Child componenet/>
</identifier-name.provider>

step 3 : use consumer to consume the value given by provider
<identifier-name.consumer>
    {
        cbf
    }
</identifier-name.consumer>


2) using useContext hook:: Syntax:  let new-identifier-name = useContext(identifier-name in step1)
  *****************


  useEffect hook in REACT (important)
--------------------------------------
-->it is used to provide side effect for function based componenet
-->in react we can tell to our componenet to do something after render

advantages of useEffect: 
o used for operating dom
o used for timer
o used for fetching data
o it is used to avoid the react life-cycle.
    o> we can avoid componenetDidMount
    o> we can avoid componenetDidUpdate
    o> we can avoid componentWillUnMount

Syntax :- 

import {useEffect} from 'react'

useEffect(cbf, dependency)

dependency (3-ways)
1)no dependency : componenet will render infinte
2)empty dependency : componenet will render only once 
3)dependency with value(props, state) : componenet will render when value changes 